package com.swampus.cooding.task.advanced;

import java.util.List;

public class Senior {

    /**
     * Task1
     * Find all permutation of given String
     */
    public List<String> permutateString(String str) {
        return null;
    }

    /**
     * Task2
     * you are given year BC return distance from Earth to moon at that age in Kilometers rounded UP
     */
    public float moonDistanceToEarth(int year) {
        return 0;
    }


    /**
     * Task3
     * Сад состоит из деревьев, стволы которых в точности цилиндры, причем радиусы разных цилиндров могут быть очень разными.
     * Этот сад нужно оградить забором как можно меньшей суммарной длины, причем расстояние от каждого ствола до забора должно составлять не менее 1.
     * Напишите программу для нахождения длины такого забора.
     * Технические условия. Программа должна прочитать с клавиатуры сначала количество деревьев в саду
     * N (3≤N≤1000) дальше N групп по три числа в каждой — x- и у-координаты центра очередного ствола и его радиус.
     * Все координаты являются целыми числами, которые не превышают по модулю миллион, радиусы, — натуральными числами, которые не превышают тысячу.
     * Гарантируется, что стволы разных деревьев не пересекаются и не касаются.
     * Программа должна вывести на экран единственное вещественное число — найденную минимальную длину забора.
     * Округлять ответ следует до 6 (6 цифр после запятой должно быть) цифры после запятой (Math.round).
     */
    public float task02(List<Integer> theGarden) {
        return 0;
    }

    /**
     * Task4
     * Магическим квадратом называется таблица из N строк и N столбцов, в которых написаны целые числа от 1 до 1000,
     * и суммы чисел в каждой строке и в каждом столбце одинаковы. Все числа в магическом квадрате должны быть различны.
     * Вам дано N, постройте любой магический квадрат N х N.
     * Формат входных данных
     * одно целое число N — размер магического квадрата (1 <= N <= 10).
     * Формат выходных данных
     * В выходной файл выведите найденный магический квадрат размера N: N строк по N чисел в каждой.
     * List<Integer> - строка c числами. (n чисел в строке)
     * List<List<Integer> - строки с числами (n строк)
     * В случае невозможности найти нужный квадрат кидайте RuntimeException c message "No solution".
     */
    public List<List<Integer>> task03(int n) {
        return null;
    }


    /**
     * Task5
     * give a list with first n numbers of Number P after point (Pi, e.t 3.14..... when n = 2 it is 14, when n=4 it is 1415 e.t.c )
     */
    public List<Integer> calculatePNumber(int n) {
        return null;
    }


}
